RTOS特点：
分而治之：功能划分为多个任务
延时函数：任务调度
抢占式： 高优先级任务抢占低优先级任务
任务堆栈：每个任务都有自己的栈空间
RTOS 实现划分为多个任务，并且在延迟的时候，不会空等待，会让出CPU的使用权给其他任务，即任务调度。
这是操作系统内部自己实现的调度算法，高优先级的任务抢占低优先级的任务，同一优先级任务按照时间片轮转的方式执行，为了保证高优先级任务执行完后，低优先级的任务不用再重新开始执行
，每个任务都有自己的栈空间，用于保存局部变量以及任务的上下文信息

一个处理器核心在某一时刻只能运行一个任务，如果各个任务之间迅速切换，这样看起来就像多个任务在同时运行，操作系统中任务调度器的责任就是使用相关的算法来决定当前时刻要执行那个任务

FreeRTOS一共支持三种任务调度方式:
抢占式调度：针对优先级不同的任务
时间片调度：针对优先级相同的任务
协程式调度：

FreeRTOS中拥有四种状态：运行态、就绪态、阻塞态、挂起态，这四种状态，除了运行态，其它三种任务状态的任务都有其对应的任务状态列表
列表类似于链表，非常重要。处于不同状态的任务就会被挂载到不同的列表下面，
只有就绪态可以直接成为运行态，其它的状态都不可以，因此只有任务挂载到就绪列表中，才能变为运行态，我们的调度器总是在就绪列表的任务中，选择具有最高优先级的任务来执行。并且信
创建的任务会直接挂载到就绪列表中


每个任务都是一个死循环，这是为了保证能够高优先级执行后，能够继续执行低的优先级的任务，如果低优先级任务执行到一半，被高优先级任务打断，低优先级任务不是四循环，
那就不执行低优先级的任务了。

如果高任务的优先级里面没有延时函数，那么它就不会让出CPU的使用权，并且高优先级任务是死循环的，它将会一直执行下去，使得低优先级的任务无法运行

就绪列表pxReadyTaskList[x],其中x地表任务优先级数值，对于硬件，x的取值为0~31
阻塞列表 pxDelayTaskList
挂起列表  xSuspendedTaskList


FreeRtos 源码整体结构
FreeRTOS： FreeRTOS 内核
FreeRTOS-Plus:FreeRTOS组件，一般我们会选择使用第三方的组件
tools:工具


内核框架：
demo:各种开发平台的demo例程
source:移植所需的源码和头文件等
portable:编译器相关文件
memMang:内存管理相关，5这种内存管理的方法
croutine.通用c文件，协程相关文件
event_groups.c 事件相关文件
list.c  列表相关文件
queue.c 队列相关文件
tasks.c 任务相关文件
timers.c 软件定时相关文件
stream_buffer.c流式缓冲区相关文件00


二、if define 定义
#if defined (versal) && !defined(ARMR5)
#define GICv3
#else
#define GICv2
#endif



(1)如何快速锁定龙头股票

实时处理单元(Real-time Processing unit, RPU),应用程序处理单元(Application processing Unit)
cpu 处理器间中断(IPI)

RPMsg 全程 Remote Processor Communication 方式进行通信, 主从核心通过IPC进行通信,而RPMsg 就是其中一种。定义了
异构多核处理系统（AMP Asymmetric Multiporcessing）


IPI使用:
发送IPI通信
将32B请求写入相应的消息缓冲区
在其中断触发寄存器的目标接收器位中写入1
或者，通过读取其观察寄存器来验证是否发布了中断
确定中断以通过一下步骤之一进行处理
1、轮训观察寄存器，直到状态位被清除，表明接收器以处理中断，
2.从发送方接收IPI中断
必须在发送放和接收方之家预先安排指示中断处理时间的方法，还必须预先安排消息缓冲区的格式

接收IPI通信
通过以下步骤之一准备接收消息请求
使用IPI 掩码寄存器IMR启用发送器中断，并通过访问GIC寄存器在处理器的中断控制器中启用中断，轮询状态寄存器以查找正在设置的位
当接收到中断时，可以选择将32B响应写入相应的消息缓冲区
像发送方发出信号，表明中断已通过一下步骤之一进行处理，1、清除状态寄存器，像发送方发出IPI中断

伽马校正：伽马校正就是对图像的伽马曲线进行编辑，以对图像进行非线性色调编辑的方法，检出图像信号中的深色部分和浅色部分，并使两者比例增大，从而
提高图像对比效果。

demosaic:去马赛克，是ISP中的刚需模块，它把图像从raw域转换到了rgb域，是raw到rgb域的分水岭
组成彩色图像的三原色是RGB，所以sensor在采集图像的时候，需要RGB 三个颜色的滤镜分别采集R/G/B 三个分量的图像，然后再把三个分量的信息合成彩色图像
，为了保证每一个像素点都对齐，要求三块滤镜必须对齐，这样的设备不太好制造，此外这种设计还会增加ensor的体积，放在数码相机上不太合适。

    于是柯达公司的科学家Bryce Bayer 发明了Bayer 模式，在彩色图像传感器表面覆盖一层彩色滤波阵列（Color Filter Arrays CFA）对输入光进行采样，每个
像素只要一个颜色的分量，这样原来的三块滤镜就缩减成了一块滤镜，解决了上面的那些问题。把bayer模式的图像插值成RGB图像的过程就是demosaic


Distortion(畸变)
畸变也叫失真，是一种可以把直线变成曲线的像差，广角镜头、变焦镜头、远距镜头容易造成严重畸变，在图像的边缘切线尤其明显

On-screen Display
mipi D-PHY CSI-2 4lane 2.5Gbps/lane

HSM:在安全启动模式下。E302A 需要依据boot代码(来自于ROM code) 通过E302A(在安全模式下)配置HSM,由HSM访问OTP获取key.并控制HSM 来完成授权验签过程。


作为启动核，涉及到安全启动核非安全启动两种模式。无论是何种模式，作为启动核，启动后根据引脚配置选择在ROM code 启动还是从 SPI NOR flash 地址处开始执行
CPU boot代码。
SPI nor flash 启动始终作为非安全模式，从ROM code 启动才有安全和非安全模式。
还可以从efuse配置地址启动，
E302A 在启动完成后可释放主核，并将任务切换到功能安全和信息管理任务，其作为监控核，发挥其高实时性，快速响应中断的特征，确保芯片在其监控下健康运行。


efuse(electronic fuse):属于一次性可编程存储器，之所以成为eFuse，cpu出厂后，这片eFuse空间内所有比特全为1，如果像1位bit写入0，那么就彻底烧死了这个bit，再
也无法改变他的值

OTP： one-Time programmable:只允许变成1次，一旦被编程，数据悠久有效


EAI8800 video subsys 子系统用于接收摄像头视频信号，经过内部ISP进行处理后，分成两路视频流信号输出，一路通过LVDS输出给屏幕进行显示；一路通过MIPI TX 向外发送


MIPI RX->ISPx_mi->sram->ISPx_hdr->sram->ISPx_b3dnr->sram->ISPx_dwr->sram->MIPI TX/LVDS


支持物理内存保护PMP
支持栈指针监控器
支持可编程物理内存属性PPMA



IPI 共提供11个channel,每个channel包含6个可供用户访问的寄存器，分成sender(TRIG/OBS) 和 receiver(ISR、IMR、IER、IDR)两组。

例程：
channel 8 向channel 2 发起中断请求; channel8 的master向其TRIG 寄存器的BIT9(对应channel2) 写入1，即向channel 2 的master发起中断请求。
channel2 的master收到中断后,可查询ISR的状态位以确定中断来源

IPI 系统中,除了channel3~6外，每个channel对应一组Message Buffer Agent,每组有8个Requester 和 8个responder,每个buffer 为32bytes,在中断过程中，
可借助这些buffer，实现两个processor间的信息交互。


APU 控制IPI-Channel0,RPU0 控制IPI-channe1
APU 向器Resuester/message Buffer 填充信息后,触发channel 中断