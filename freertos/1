RTOS特点：
分而治之：功能划分为多个任务
延时函数：任务调度
抢占式： 高优先级任务抢占低优先级任务
任务堆栈：每个任务都有自己的栈空间
RTOS 实现划分为多个任务，并且在延迟的时候，不会空等待，会让出CPU的使用权给其他任务，即任务调度。
这是操作系统内部自己实现的调度算法，高优先级的任务抢占低优先级的任务，同一优先级任务按照时间片轮转的方式执行，为了保证高优先级任务执行完后，低优先级的任务不用再重新开始执行
，每个任务都有自己的栈空间，用于保存局部变量以及任务的上下文信息

一个处理器核心在某一时刻只能运行一个任务，如果各个任务之间迅速切换，这样看起来就像多个任务在同时运行，操作系统中任务调度器的责任就是使用相关的算法来决定当前时刻要执行那个任务

FreeRTOS一共支持三种任务调度方式:
抢占式调度：针对优先级不同的任务
时间片调度：针对优先级相同的任务
协程式调度：

FreeRTOS中拥有四种状态：运行态、就绪态、阻塞态、挂起态，这四种状态，除了运行态，其它三种任务状态的任务都有其对应的任务状态列表
列表类似于链表，非常重要。处于不同状态的任务就会被挂载到不同的列表下面，
只有就绪态可以直接成为运行态，其它的状态都不可以，因此只有任务挂载到就绪列表中，才能变为运行态，我们的调度器总是在就绪列表的任务中，选择具有最高优先级的任务来执行。并且信
创建的任务会直接挂载到就绪列表中


每个任务都是一个死循环，这是为了保证能够高优先级执行后，能够继续执行低的优先级的任务，如果低优先级任务执行到一半，被高优先级任务打断，低优先级任务不是四循环，
那就不执行低优先级的任务了。

如果高任务的优先级里面没有延时函数，那么它就不会让出CPU的使用权，并且高优先级任务是死循环的，它将会一直执行下去，使得低优先级的任务无法运行

就绪列表pxReadyTaskList[x],其中x地表任务优先级数值，对于硬件，x的取值为0~31
阻塞列表 pxDelayTaskList
挂起列表  xSuspendedTaskList